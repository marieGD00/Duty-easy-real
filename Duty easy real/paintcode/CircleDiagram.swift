//
//  CircleDiagram.swift
//
//  Created on Sep 30, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class CircleDiagram: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawUntitled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 204), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 204), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 204)
        context.translateBy(x: -424, y: -76)
        
        /// Oval
        let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 168, height: 170))
        context.saveGState()
        context.translateBy(x: 440, y: 93)
        oval.lineWidth = 1
        UIColor(hue: 0.805, saturation: 0.93, brightness: 0.879, alpha: 1).setStroke()
        oval.stroke()
        context.restoreGState()
        
        /// Oval 2
        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 468, y: 93)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval2.fill()
            oval2.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval2.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 438, y: 203)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval3.fill()
            oval3.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval3.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 578, y: 109)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval4.fill()
            oval4.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval4.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 593, y: 171)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval5.fill()
            oval5.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval5.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 494, y: 247)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval6.fill()
            oval6.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval6.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 563, y: 219)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval7.fill()
            oval7.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval7.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval8 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 524, y: 77)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval8.fill()
            oval8.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval8.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Oval 2
        let oval9 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 30, height: 32))
        context.saveGState()
        context.setAlpha(0.49)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 425, y: 139)
            UIColor(hue: 1, saturation: 0.545, brightness: 0.926, alpha: 1).setFill()
            oval9.fill()
            oval9.lineWidth = 1
            UIColor(hue: 0.98, saturation: 0.991, brightness: 0.816, alpha: 1).setStroke()
            oval9.stroke()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 168, height: 161), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 168, height: 161), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 168, y: resizedFrame.height / 161)
        
        /// Oval
        let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 168, height: 161))
        context.saveGState()
        UIColor(white: 0.847, alpha: 1).setFill()
        oval.fill()
        oval.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        oval.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfUntitled() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 204), false, 0)
        CircleDiagram.drawUntitled()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 168, height: 161), false, 0)
        CircleDiagram.drawUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
